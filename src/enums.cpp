/*
 * Copyright (C) Andrey Pikas
 */

#include <cassandra.h>
#include <cass/enums.hpp>

namespace cass {

#define CHECK_EQ(a, b) static_assert(int(a) == int(b), "Not equal")

CHECK_EQ(consistency::UNKNOWN     , ::CASS_CONSISTENCY_UNKNOWN);
CHECK_EQ(consistency::ANY         , ::CASS_CONSISTENCY_ANY);
CHECK_EQ(consistency::ONE         , ::CASS_CONSISTENCY_ONE);
CHECK_EQ(consistency::TWO         , ::CASS_CONSISTENCY_TWO);
CHECK_EQ(consistency::THREE       , ::CASS_CONSISTENCY_THREE);
CHECK_EQ(consistency::QUORUM      , ::CASS_CONSISTENCY_QUORUM);
CHECK_EQ(consistency::ALL         , ::CASS_CONSISTENCY_ALL);
CHECK_EQ(consistency::LOCAL_QUORUM, ::CASS_CONSISTENCY_LOCAL_QUORUM);
CHECK_EQ(consistency::EACH_QUORUM , ::CASS_CONSISTENCY_EACH_QUORUM);
CHECK_EQ(consistency::SERIAL      , ::CASS_CONSISTENCY_SERIAL);
CHECK_EQ(consistency::LOCAL_SERIAL, ::CASS_CONSISTENCY_LOCAL_SERIAL);
CHECK_EQ(consistency::LOCAL_ONE   , ::CASS_CONSISTENCY_LOCAL_ONE);

CHECK_EQ(write_type::UNKNOWN       , ::CASS_WRITE_TYPE_UNKNOWN);
CHECK_EQ(write_type::SIMPLE        , ::CASS_WRITE_TYPE_SIMPLE);
CHECK_EQ(write_type::BATCH         , ::CASS_WRITE_TYPE_BATCH);
CHECK_EQ(write_type::UNLOGGED_BATCH, ::CASS_WRITE_TYPE_UNLOGGED_BATCH);
CHECK_EQ(write_type::COUNTER       , ::CASS_WRITE_TYPE_COUNTER);
CHECK_EQ(write_type::BATCH_LOG     , ::CASS_WRITE_TYPE_BATCH_LOG);
CHECK_EQ(write_type::CAS           , ::CASS_WRITE_TYPE_CAS);

CHECK_EQ(column_type::REGULAR       , ::CASS_COLUMN_TYPE_REGULAR);
CHECK_EQ(column_type::PARTITION_KEY , ::CASS_COLUMN_TYPE_PARTITION_KEY);
CHECK_EQ(column_type::CLUSTERING_KEY, ::CASS_COLUMN_TYPE_CLUSTERING_KEY);
CHECK_EQ(column_type::STATIC        , ::CASS_COLUMN_TYPE_STATIC);
CHECK_EQ(column_type::COMPACT_VALUE , ::CASS_COLUMN_TYPE_COMPACT_VALUE);

CHECK_EQ(index_type::UNKNOWN   , ::CASS_INDEX_TYPE_UNKNOWN);
CHECK_EQ(index_type::KEYS      , ::CASS_INDEX_TYPE_KEYS);
CHECK_EQ(index_type::CUSTOM    , ::CASS_INDEX_TYPE_CUSTOM);
CHECK_EQ(index_type::COMPOSITES, ::CASS_INDEX_TYPE_COMPOSITES);

CHECK_EQ(value_type::UNKNOWN   , ::CASS_VALUE_TYPE_UNKNOWN);
CHECK_EQ(value_type::CUSTOM    , ::CASS_VALUE_TYPE_CUSTOM);
CHECK_EQ(value_type::ASCII     , ::CASS_VALUE_TYPE_ASCII);
CHECK_EQ(value_type::BIGINT    , ::CASS_VALUE_TYPE_BIGINT);
CHECK_EQ(value_type::BLOB      , ::CASS_VALUE_TYPE_BLOB);
CHECK_EQ(value_type::BOOLEAN   , ::CASS_VALUE_TYPE_BOOLEAN);
CHECK_EQ(value_type::COUNTER   , ::CASS_VALUE_TYPE_COUNTER);
CHECK_EQ(value_type::DECIMAL   , ::CASS_VALUE_TYPE_DECIMAL);
CHECK_EQ(value_type::DOUBLE    , ::CASS_VALUE_TYPE_DOUBLE);
CHECK_EQ(value_type::FLOAT     , ::CASS_VALUE_TYPE_FLOAT);
CHECK_EQ(value_type::INT       , ::CASS_VALUE_TYPE_INT);
CHECK_EQ(value_type::TEXT      , ::CASS_VALUE_TYPE_TEXT);
CHECK_EQ(value_type::TIMESTAMP , ::CASS_VALUE_TYPE_TIMESTAMP);
CHECK_EQ(value_type::UUID      , ::CASS_VALUE_TYPE_UUID);
CHECK_EQ(value_type::VARCHAR   , ::CASS_VALUE_TYPE_VARCHAR);
CHECK_EQ(value_type::VARINT    , ::CASS_VALUE_TYPE_VARINT);
CHECK_EQ(value_type::TIMEUUID  , ::CASS_VALUE_TYPE_TIMEUUID);
CHECK_EQ(value_type::INET      , ::CASS_VALUE_TYPE_INET);
CHECK_EQ(value_type::DATE      , ::CASS_VALUE_TYPE_DATE);
CHECK_EQ(value_type::TIME      , ::CASS_VALUE_TYPE_TIME);
CHECK_EQ(value_type::SMALL_INT , ::CASS_VALUE_TYPE_SMALL_INT);
CHECK_EQ(value_type::TINY_INT  , ::CASS_VALUE_TYPE_TINY_INT);
CHECK_EQ(value_type::LIST      , ::CASS_VALUE_TYPE_LIST);
CHECK_EQ(value_type::MAP       , ::CASS_VALUE_TYPE_MAP);
CHECK_EQ(value_type::SET       , ::CASS_VALUE_TYPE_SET);
CHECK_EQ(value_type::UDT       , ::CASS_VALUE_TYPE_UDT);
CHECK_EQ(value_type::TUPLE     , ::CASS_VALUE_TYPE_TUPLE);
CHECK_EQ(value_type::LAST_ENTRY, ::CASS_VALUE_TYPE_LAST_ENTRY);

CHECK_EQ(clustering_order::NONE, ::CASS_CLUSTERING_ORDER_NONE);
CHECK_EQ(clustering_order::ASC , ::CASS_CLUSTERING_ORDER_ASC);
CHECK_EQ(clustering_order::DESC, ::CASS_CLUSTERING_ORDER_DESC);

CHECK_EQ(collection_type::LIST, ::CASS_COLLECTION_TYPE_LIST);
CHECK_EQ(collection_type::MAP , ::CASS_COLLECTION_TYPE_MAP);
CHECK_EQ(collection_type::SET , ::CASS_COLLECTION_TYPE_SET);

CHECK_EQ(batch_type::LOGGED  , ::CASS_BATCH_TYPE_LOGGED);
CHECK_EQ(batch_type::UNLOGGED, ::CASS_BATCH_TYPE_UNLOGGED);
CHECK_EQ(batch_type::COUNTER , ::CASS_BATCH_TYPE_COUNTER);

CHECK_EQ(iterator_type::RESULT                , ::CASS_ITERATOR_TYPE_RESULT);
CHECK_EQ(iterator_type::ROW                   , ::CASS_ITERATOR_TYPE_ROW);
CHECK_EQ(iterator_type::COLLECTION            , ::CASS_ITERATOR_TYPE_COLLECTION);
CHECK_EQ(iterator_type::MAP                   , ::CASS_ITERATOR_TYPE_MAP);
CHECK_EQ(iterator_type::TUPLE                 , ::CASS_ITERATOR_TYPE_TUPLE);
CHECK_EQ(iterator_type::USER_TYPE_FIELD       , ::CASS_ITERATOR_TYPE_USER_TYPE_FIELD);
CHECK_EQ(iterator_type::META_FIELD            , ::CASS_ITERATOR_TYPE_META_FIELD);
CHECK_EQ(iterator_type::KEYSPACE_META         , ::CASS_ITERATOR_TYPE_KEYSPACE_META);
CHECK_EQ(iterator_type::TABLE_META            , ::CASS_ITERATOR_TYPE_TABLE_META);
CHECK_EQ(iterator_type::TYPE_META             , ::CASS_ITERATOR_TYPE_TYPE_META);
CHECK_EQ(iterator_type::FUNCTION_META         , ::CASS_ITERATOR_TYPE_FUNCTION_META);
CHECK_EQ(iterator_type::AGGREGATE_META        , ::CASS_ITERATOR_TYPE_AGGREGATE_META);
CHECK_EQ(iterator_type::COLUMN_META           , ::CASS_ITERATOR_TYPE_COLUMN_META);
CHECK_EQ(iterator_type::INDEX_META            , ::CASS_ITERATOR_TYPE_INDEX_META);
CHECK_EQ(iterator_type::MATERIALIZED_VIEW_META, ::CASS_ITERATOR_TYPE_MATERIALIZED_VIEW_META);

CHECK_EQ(log_level::DISABLED  , ::CASS_LOG_DISABLED);
CHECK_EQ(log_level::CRITICAL  , ::CASS_LOG_CRITICAL);
CHECK_EQ(log_level::ERROR     , ::CASS_LOG_ERROR);
CHECK_EQ(log_level::WARN      , ::CASS_LOG_WARN);
CHECK_EQ(log_level::INFO      , ::CASS_LOG_INFO);
CHECK_EQ(log_level::DEBUG     , ::CASS_LOG_DEBUG);
CHECK_EQ(log_level::TRACE     , ::CASS_LOG_TRACE);
CHECK_EQ(log_level::LAST_ENTRY, ::CASS_LOG_LAST_ENTRY);

CHECK_EQ(ssl_verify_flags::NONE             , ::CASS_SSL_VERIFY_NONE);
CHECK_EQ(ssl_verify_flags::PEER_CERT        , ::CASS_SSL_VERIFY_PEER_CERT);
CHECK_EQ(ssl_verify_flags::PEER_IDENTITY    , ::CASS_SSL_VERIFY_PEER_IDENTITY);
CHECK_EQ(ssl_verify_flags::PEER_IDENTITY_DNS, ::CASS_SSL_VERIFY_PEER_IDENTITY_DNS);

CHECK_EQ(error_source::NONE       , ::CASS_ERROR_SOURCE_NONE);
CHECK_EQ(error_source::LIB        , ::CASS_ERROR_SOURCE_LIB);
CHECK_EQ(error_source::SERVER     , ::CASS_ERROR_SOURCE_SERVER);
CHECK_EQ(error_source::SSL        , ::CASS_ERROR_SOURCE_SSL);
CHECK_EQ(error_source::COMPRESSION, ::CASS_ERROR_SOURCE_COMPRESSION);

CHECK_EQ(error::OK                               , ::CASS_OK);
CHECK_EQ(error::LIB_BAD_PARAMS                   , ::CASS_ERROR_LIB_BAD_PARAMS);
CHECK_EQ(error::LIB_NO_STREAMS                   , ::CASS_ERROR_LIB_NO_STREAMS);
CHECK_EQ(error::LIB_UNABLE_TO_INIT               , ::CASS_ERROR_LIB_UNABLE_TO_INIT);
CHECK_EQ(error::LIB_MESSAGE_ENCODE               , ::CASS_ERROR_LIB_MESSAGE_ENCODE);
CHECK_EQ(error::LIB_HOST_RESOLUTION              , ::CASS_ERROR_LIB_HOST_RESOLUTION);
CHECK_EQ(error::LIB_UNEXPECTED_RESPONSE          , ::CASS_ERROR_LIB_UNEXPECTED_RESPONSE);
CHECK_EQ(error::LIB_REQUEST_QUEUE_FULL           , ::CASS_ERROR_LIB_REQUEST_QUEUE_FULL);
CHECK_EQ(error::LIB_NO_AVAILABLE_IO_THREAD       , ::CASS_ERROR_LIB_NO_AVAILABLE_IO_THREAD);
CHECK_EQ(error::LIB_WRITE_ERROR                  , ::CASS_ERROR_LIB_WRITE_ERROR);
CHECK_EQ(error::LIB_NO_HOSTS_AVAILABLE           , ::CASS_ERROR_LIB_NO_HOSTS_AVAILABLE);
CHECK_EQ(error::LIB_INDEX_OUT_OF_BOUNDS          , ::CASS_ERROR_LIB_INDEX_OUT_OF_BOUNDS);
CHECK_EQ(error::LIB_INVALID_ITEM_COUNT           , ::CASS_ERROR_LIB_INVALID_ITEM_COUNT);
CHECK_EQ(error::LIB_INVALID_VALUE_TYPE           , ::CASS_ERROR_LIB_INVALID_VALUE_TYPE);
CHECK_EQ(error::LIB_REQUEST_TIMED_OUT            , ::CASS_ERROR_LIB_REQUEST_TIMED_OUT);
CHECK_EQ(error::LIB_UNABLE_TO_SET_KEYSPACE       , ::CASS_ERROR_LIB_UNABLE_TO_SET_KEYSPACE);
CHECK_EQ(error::LIB_CALLBACK_ALREADY_SET         , ::CASS_ERROR_LIB_CALLBACK_ALREADY_SET);
CHECK_EQ(error::LIB_INVALID_STATEMENT_TYPE       , ::CASS_ERROR_LIB_INVALID_STATEMENT_TYPE);
CHECK_EQ(error::LIB_NAME_DOES_NOT_EXIST          , ::CASS_ERROR_LIB_NAME_DOES_NOT_EXIST);
CHECK_EQ(error::LIB_UNABLE_TO_DETERMINE_PROTOCOL , ::CASS_ERROR_LIB_UNABLE_TO_DETERMINE_PROTOCOL);
CHECK_EQ(error::LIB_NULL_VALUE                   , ::CASS_ERROR_LIB_NULL_VALUE);
CHECK_EQ(error::LIB_NOT_IMPLEMENTED              , ::CASS_ERROR_LIB_NOT_IMPLEMENTED);
CHECK_EQ(error::LIB_UNABLE_TO_CONNECT            , ::CASS_ERROR_LIB_UNABLE_TO_CONNECT);
CHECK_EQ(error::LIB_UNABLE_TO_CLOSE              , ::CASS_ERROR_LIB_UNABLE_TO_CLOSE);
CHECK_EQ(error::LIB_NO_PAGING_STATE              , ::CASS_ERROR_LIB_NO_PAGING_STATE);
CHECK_EQ(error::LIB_PARAMETER_UNSET              , ::CASS_ERROR_LIB_PARAMETER_UNSET);
CHECK_EQ(error::LIB_INVALID_ERROR_RESULT_TYPE    , ::CASS_ERROR_LIB_INVALID_ERROR_RESULT_TYPE);
CHECK_EQ(error::LIB_INVALID_FUTURE_TYPE          , ::CASS_ERROR_LIB_INVALID_FUTURE_TYPE);
CHECK_EQ(error::LIB_INTERNAL_ERROR               , ::CASS_ERROR_LIB_INTERNAL_ERROR);
CHECK_EQ(error::LIB_INVALID_CUSTOM_TYPE          , ::CASS_ERROR_LIB_INVALID_CUSTOM_TYPE);
CHECK_EQ(error::LIB_INVALID_DATA                 , ::CASS_ERROR_LIB_INVALID_DATA);
CHECK_EQ(error::LIB_NOT_ENOUGH_DATA              , ::CASS_ERROR_LIB_NOT_ENOUGH_DATA);
CHECK_EQ(error::LIB_INVALID_STATE                , ::CASS_ERROR_LIB_INVALID_STATE);
CHECK_EQ(error::LIB_NO_CUSTOM_PAYLOAD            , ::CASS_ERROR_LIB_NO_CUSTOM_PAYLOAD);
CHECK_EQ(error::SERVER_SERVER_ERROR              , ::CASS_ERROR_SERVER_SERVER_ERROR);
CHECK_EQ(error::SERVER_PROTOCOL_ERROR            , ::CASS_ERROR_SERVER_PROTOCOL_ERROR);
CHECK_EQ(error::SERVER_BAD_CREDENTIALS           , ::CASS_ERROR_SERVER_BAD_CREDENTIALS);
CHECK_EQ(error::SERVER_UNAVAILABLE               , ::CASS_ERROR_SERVER_UNAVAILABLE);
CHECK_EQ(error::SERVER_OVERLOADED                , ::CASS_ERROR_SERVER_OVERLOADED);
CHECK_EQ(error::SERVER_IS_BOOTSTRAPPING          , ::CASS_ERROR_SERVER_IS_BOOTSTRAPPING);
CHECK_EQ(error::SERVER_TRUNCATE_ERROR            , ::CASS_ERROR_SERVER_TRUNCATE_ERROR);
CHECK_EQ(error::SERVER_WRITE_TIMEOUT             , ::CASS_ERROR_SERVER_WRITE_TIMEOUT);
CHECK_EQ(error::SERVER_READ_TIMEOUT              , ::CASS_ERROR_SERVER_READ_TIMEOUT);
CHECK_EQ(error::SERVER_READ_FAILURE              , ::CASS_ERROR_SERVER_READ_FAILURE);
CHECK_EQ(error::SERVER_FUNCTION_FAILURE          , ::CASS_ERROR_SERVER_FUNCTION_FAILURE);
CHECK_EQ(error::SERVER_WRITE_FAILURE             , ::CASS_ERROR_SERVER_WRITE_FAILURE);
CHECK_EQ(error::SERVER_SYNTAX_ERROR              , ::CASS_ERROR_SERVER_SYNTAX_ERROR);
CHECK_EQ(error::SERVER_UNAUTHORIZED              , ::CASS_ERROR_SERVER_UNAUTHORIZED);
CHECK_EQ(error::SERVER_INVALID_QUERY             , ::CASS_ERROR_SERVER_INVALID_QUERY);
CHECK_EQ(error::SERVER_CONFIG_ERROR              , ::CASS_ERROR_SERVER_CONFIG_ERROR);
CHECK_EQ(error::SERVER_ALREADY_EXISTS            , ::CASS_ERROR_SERVER_ALREADY_EXISTS);
CHECK_EQ(error::SERVER_UNPREPARED                , ::CASS_ERROR_SERVER_UNPREPARED);
CHECK_EQ(error::SSL_INVALID_CERT                 , ::CASS_ERROR_SSL_INVALID_CERT);
CHECK_EQ(error::SSL_INVALID_PRIVATE_KEY          , ::CASS_ERROR_SSL_INVALID_PRIVATE_KEY);
CHECK_EQ(error::SSL_NO_PEER_CERT                 , ::CASS_ERROR_SSL_NO_PEER_CERT);
CHECK_EQ(error::SSL_INVALID_PEER_CERT            , ::CASS_ERROR_SSL_INVALID_PEER_CERT);
CHECK_EQ(error::SSL_IDENTITY_MISMATCH            , ::CASS_ERROR_SSL_IDENTITY_MISMATCH);
CHECK_EQ(error::SSL_PROTOCOL_ERROR               , ::CASS_ERROR_SSL_PROTOCOL_ERROR);
CHECK_EQ(error::LAST_ENTRY                       , ::CASS_ERROR_LAST_ENTRY);

} // namespace cass
